h1. Scaling the Scaling Debate

If you read my blog for web geeky Railsy sorts of things, you might be interested in the "post I put up earlier today":http://twitter.com/blog/2007/06/under-hood-at-twitter.html on the Twitter blog.

A lot of internet time has passed since the oft-referenced "interview":http://www.radicalbehavior.com/5-question-interview-with-twitter-developer-alex-payne/ I did with Josh Kenzer back in March.  We've learned a lot since then, but the most important lesson was that we're not building a web application, we're building a communications service for which the web is just another endpoint.  Ruby has turned out to be a great language for building a communications service.  With some work and coaxing, Rails has scaled up to keep pace with the demands on that service.

It's humbling that enough eyes are on us that bloggers fire up their text editors "when I start bookmarking different technologies":http://blog.davidcancel.com/post/3316791.  Everyone at Twitter has done research, both at work and in their free time, towards the best technologies for our application.  Ruby and Rails is the solution we've come back to for all kinds of reasons.

The Rails community is still young, and we've already seen amazing work done on the scaling front.  As more Rails sites start pushing heavy traffic, the solutions available are only going to get better.  If the community can stay friendly, smart, and agile, the only place to go is up.