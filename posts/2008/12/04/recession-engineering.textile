h1. Recession Engineering

It seems like everyone's taking guesses as to how the "recession":http://money.cnn.com/2008/12/01/news/economy/recession/?postversion=2008120115 will impact their little corner of the world. This is my guess.

<a href="http://thisisindexed.com/2008/12/might-as-well-own-this-meltdown/"><img src ="http://thisisindexed.com/wp-content/uploads/2008/12/card1945-380x230.jpg" /></a>

The trend in engineering and architecture during the "now-bursting":http://www.businessweek.com/the_thread/techbeat/archives/2008/10/is_that_the_sou.html Web 2.0 bubble has been one of precious little _engineering_ at all. It's become the common wisdom to ship first and scale later, and Hoare's old "chestnut":http://www.acm.org/ubiquity/views/v7i24_fallacy.html of "premature optimization is the root of all evil" is a favorite flippant dismissal of any suggestion to the contrary.  Technologies that enable a fill-in-the-blanks approach to rapid development at the expense of performance have become the default choice for new companies in this environment. It's taken for granted that "The Cloud":http://en.wikipedia.org/wiki/Cloud_computing will solve scalability issues because, of course, why optimize when you can just fire up more servers to run your sluggish code? Or, when you get popular, rewrite, and never mind the "second-system effect":http://en.wikipedia.org/wiki/Second-system_effect.

The difference between investor-responsible, cost-driven development and put-the-prototype-in-production hackery can be serious money.  In a recession economy, my hunch is that this haphazard latter approach to engineering is going to be one of the first things to go.   What's different, now, is that there needn't be a tradeoff between performance and expressiveness, or between reliability and developer satisfaction. The tools have improved over the last several years as more organizations have faced scaling challenges, and tools matter.

I'm first to admit that I have something of an agenda with this prediction. I spend a fair bit of my time working with and writing about the "Scala programming language":http://scala-lang.org, which provides the expressiveness and flexibility of dynamic and functional languages like Ruby, Python, and Lisp with the performance of C++ or Java.  But Scala is just one of a number of tools that can be applied to do engineering right on a budget without being miserable. The open source community has become rich with "performance testing tools":http://www.opensourcetesting.org/performance.php, "libraries to aid test-driven development":http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks, "powerful statistics suites":http://www.r-project.org/, and much more. Even "sharing optimization stories":http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-2/ goes a long way towards encouraging the type of performance- and correctness-oriented engineering that's going to succeed in a tight market.

I think this recession is an opportunity for a minor "Dijkstrian":http://www.catonmat.net/blog/edsger-dijkstra-discipline-in-thought/ renaissance in the values of the tech community, and particularly the web application development community. It's important to remember that software engineering is a _practice_, like medicine or law, and that as engineers it's our responsibility to make the right choices on behalf of our stakeholders. My hope is that other developers survey the landscape of tools and approaches and choose those that best fit the current economic constraints.